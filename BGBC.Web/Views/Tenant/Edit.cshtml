@model BGBC.Web.Models.TenantInfo

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="back">
    @using (Html.BeginForm("ConfirmEdit", "Tenant", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(p => p.PropertyID)
        @Html.HiddenFor(p => p.UserID)
        @Html.HiddenFor(p => p.TenantID)
        @Html.HiddenFor(p => p.ProfileInfo.ProfileID)
        @Html.HiddenFor(p => p.Address)
        @Html.HiddenFor(p => p.Address2)
        @Html.HiddenFor(p => p.City)
        @Html.HiddenFor(p => p.State)
        @Html.HiddenFor(p => p.Zip)
        @Html.HiddenFor(p => p.RentAmount)
        @Html.HiddenFor(p => p.FinalDueDate)
        @Html.HiddenFor(p => p.Deposit)
        @Html.HiddenFor(p => p.DepostDueDate)
        @Html.HiddenFor(p => p.PetDepositDue)
        @Html.HiddenFor(p => p.PetRentAmount)
        @Html.HiddenFor(p => p.PetDeposit)
        @Html.HiddenFor(p => p.OwnerName)
        @Html.HiddenFor(p => p.PropertyName)
        @Html.HiddenFor(p => p.LeaseDocument)

        <h1>@Model.PropertyName - Edit Tenants</h1>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <h5><span style="color:red">&#42;</span>indicates a required field</h5>
        <h5> <span style="color:blue">&#134;</span> indicates information that can only be updated by BGBC Management To request a change, please fill out <a onclick="location.href='@Url.Action("Contact", "Home", null ,null)'" style=" cursor:pointer">this form.</a></h5>
        <br />

        @Html.Label("Property Manager Name")
        <h6>@Model.OwnerName</h6>
        <br />

        @Html.Label("Property Address")
        <h6>@Model.Address</h6>
        <h6>@Model.Address2</h6>
        <h6>@Model.City,@Model.State @Model.Zip</h6>
        <br />
        <div class="Row">
            <div class="form-group">
                @Html.LabelFor(p => p.FirstName, htmlAttributes: new { @class = "control-label required" })
                @Html.EditorFor(p => p.FirstName, new { htmlAttributes = new { @class = "form-control required" } })
                @Html.ValidationMessageFor(p => p.FirstName, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(p => p.LastName, htmlAttributes: new { @class = "control-label required" })
                @Html.EditorFor(p => p.LastName, new { htmlAttributes = new { @class = "form-control required" } })
                @Html.ValidationMessageFor(p => p.LastName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="Row">
            <div class="form-group">
                @Html.LabelFor(p => p.Email, htmlAttributes: new { @class = "control-label required" })
                @Html.EditorFor(p => p.Email, new { htmlAttributes = new { @class = "form-control required" } })
                @Html.ValidationMessageFor(p => p.Email, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(p => p.ConfirmEmail, htmlAttributes: new { @class = "control-label required" })
                @Html.EditorFor(p => p.ConfirmEmail, new { htmlAttributes = new { @class = "form-control required" } })
                @Html.ValidationMessageFor(p => p.ConfirmEmail, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="Row">
            <div class="form-group">
                @Html.LabelFor(p => p.ProfileInfo.BillingAddressSame, htmlAttributes: new { @class = "control-label " })
                @Html.CheckBoxFor(p => p.ProfileInfo.BillingAddressSame, new Dictionary<String, object> { { "class", "control-label" }, { "onclick", "billingAddressSame.call(this)" }, { "data-on-text", "complete" }, { "data-off-text", "incomplete" } })<b> Same As Property Address</b>
            </div>
        </div>
        <div class="Row billing-address-fields">
            <div class="form-group">
                @Html.LabelFor(p => p.ProfileInfo.BillingAddress, htmlAttributes: new { @class = "control-label required" })
                @Html.EditorFor(p => p.ProfileInfo.BillingAddress, new { htmlAttributes = new { @class = "form-control billing-address-field" } })
                @Html.ValidationMessageFor(p => p.ProfileInfo.BillingAddress, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="Row billing-address-fields">
            <div class="form-group">
                @Html.LabelFor(p => p.ProfileInfo.BillingAddress_2, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(p => p.ProfileInfo.BillingAddress_2, new { htmlAttributes = new { @class = "form-control billing-address-field" } })
                @Html.ValidationMessageFor(p => p.ProfileInfo.BillingAddress_2, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="Row billing-address-fields">
            <div class="form-group">
                @Html.LabelFor(p => p.ProfileInfo.BillingCty, htmlAttributes: new { @class = "control-label required" })
                @Html.EditorFor(p => p.ProfileInfo.BillingCty, new { htmlAttributes = new { @class = "form-control billing-address-field" } })
                @Html.ValidationMessageFor(p => p.ProfileInfo.BillingCty, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="Row billing-address-fields">
            <div class="form-group">
                @Html.LabelFor(p => p.ProfileInfo.BillingState, htmlAttributes: new { @class = "control-label required" })
                @Html.DropDownListFor(p => p.ProfileInfo.BillingState, (IEnumerable<SelectListItem>)ViewBag.States, "--Select Billing State--", new { @class = "form-control" })
                @Html.ValidationMessageFor(p => p.ProfileInfo.BillingState, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="Row billing-address-fields">
            <div class="form-group">
                @Html.LabelFor(p => p.ProfileInfo.BillingZip, htmlAttributes: new { @class = "control-label required" })
                @Html.EditorFor(p => p.ProfileInfo.BillingZip, new { htmlAttributes = new { @class = "form-control billing-address-field" } })
                @Html.ValidationMessageFor(p => p.ProfileInfo.BillingZip, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="Row">
            <div class="form-group">
                @Html.LabelFor(p => p.ProfileInfo.HomePhone, htmlAttributes: new { @class = "control-label required" })
                @Html.EditorFor(p => p.ProfileInfo.HomePhone, new { htmlAttributes = new { @class = "form-control required phoneno-mask" } })
                @Html.ValidationMessageFor(p => p.ProfileInfo.HomePhone, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="Row">
            <div class="form-group">
                @Html.LabelFor(p => p.ProfileInfo.WorkPhone, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(p => p.ProfileInfo.WorkPhone, new { htmlAttributes = new { @class = "form-control phoneno-mask" } })
                @Html.ValidationMessageFor(p => p.ProfileInfo.WorkPhone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="Row">
            <div class="form-group">
                @Html.LabelFor(p => p.ProfileInfo.MobilePhone, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(p => p.ProfileInfo.MobilePhone, new { htmlAttributes = new { @class = "form-control phoneno-mask" } })
                @Html.ValidationMessageFor(p => p.ProfileInfo.MobilePhone, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="Row">
            <div class="form-group">
                @if (@Model.LeaseDocument == true)
                {
                    @Html.Label("Upload your Lease Documents")
                    <input type="file" id="fileToUpload" name="file" /><span>@Model.LeaseDocName &nbsp;&nbsp;&nbsp;</span>
                    if (Model.LeaseDocName != null)
                    {
                        @Html.ActionLink("Download", "Filedownload", new { @id = Model.TenantID, @name = Model.LeaseDocName })
                    }
                    @Html.ValidationMessage("file", "", new { @class = "text-danger" })
                }
            </div>
        </div>
        <div class="Row">
            <div class="form-group">
                @Html.LabelFor(p => p.RentAmount, htmlAttributes: new { @class = "control-label " })<span style="color:blue"> &#134; </span>
                @Html.DisplayFor(p => p.RentAmount)
            </div>
        </div>
        <div class="Row">
            <div class="form-group">
                @Html.LabelFor(p => p.FinalDueDate, htmlAttributes: new { @class = "control-label" })<span style="color:blue"> &#134; </span>
                @Html.DisplayFor(p => p.FinalDueDate)
            </div>
        </div>

        <div class="Row">
            <div class="form-group">
                @Html.LabelFor(p => p.Deposit, htmlAttributes: new { @class = "control-label" })<span style="color:blue"> &#134; </span>
                @Html.DisplayFor(p => p.Deposit)
            </div>
        </div>
        <div class="Row">
            <div class="form-group">
                @Html.LabelFor(p => p.DepostDueDate, htmlAttributes: new { @class = "control-label" })<span style="color:blue"> &#134; </span>
                @Html.DisplayFor(p => p.DepostDueDate)
            </div>
        </div>

        <div class="Row">
            <div class="form-group">
                @Html.LabelFor(p => p.PetDepositDue, htmlAttributes: new { @class = "control-label" })<span style="color:blue"> &#134; </span>
                @if (Model.PetDepositDue.ToString() == "True")
                {
                    <span>Yes</span>
                }
                else
                {
                    <span>No</span>
                }
            </div>
        </div>
        if (Model.PetDepositDue.ToString() == "True")
        {
            <div class="Row pet-deposit-due">
                <div class="form-group">
                    @Html.LabelFor(p => p.PetDeposit, htmlAttributes: new { @class = "control-label requred" })<span style="color:blue"> &#134; </span>
                    @Html.DisplayFor(p => p.PetDeposit)
                </div>
            </div>
        }
        <div class="Row">
            <div class="form-group">
                @Html.LabelFor(p => p.PetRentAmount, htmlAttributes: new { @class = "control-label" })<span style="color:blue"> &#134; </span>
                @Html.DisplayFor(p => p.PetRentAmount)
            </div>
        </div>
        <br />
        <div class="form-group">
            <input type="submit" value="Save Changes" class="btn btn-default" />

            @*Id is not pass it returns error => Add -> Conform -> Edit -> Cancel*@
            @if (@ViewBag.Url == "PropertyTenants")
            {
                @Html.ActionLink("Cancel", "PropertyTenants", "Owner", new { id = Model.PropertyID }, new { })
            }
            else
            {
                @Html.ActionLink("Cancel", "MyProperties", "Owner", null, new { })
            }

        </div>
    }


</div>
@section scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(document).ready(function () {
            billingAddressSame();
            petDepositDueClick();
        });
        function billingAddressSame() {
            if ($('#ProfileInfo_BillingAddressSame').prop('checked')) {
                $('.billing-address-fields').addClass('hidden');
                jQuery('.billing-address-field').each(function () {
                    $(this).prop("data-val", false);
                });
            } else {
                $('.billing-address-fields').removeClass('hidden');
            }
        }
        function petDepositDueClick() {
            if ($('#PetDepositDue').prop('value') == "false") {
                $('.pet-deposit-due').addClass('hidden');
                $('#PetDeposit').attr("data-val", false);
            } else if (!this.checked) {
                $('.pet-deposit-due').removeClass('hidden');
                $('#PetDeposit').attr("data-val", true);
            }
        }
    </script>
}
