@model BGBC.Web.Models.Payments

@{
    ViewBag.Title = "TenantPayment";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="back">
    @using (Html.BeginForm("TenantPayment", "Tenant"))
    {
        <div class="col-md-12 no-padd">
            <div class="col-md-6  no-padd">
                <h1>Make Payments</h1>
            </div>
            <div class="col-md-6  no-padd header-btn">
                <input type="button" value="Back to My Account" class="btn btn-primary pull-right" onclick="location.href='@Url.Action("MyAccount", "Tenant")'" />
                @*@Html.ActionLink("Back To My Accout", "Myaccount", "Tenant", new { @class = "btn-block btn-primary pull-right" })*@
            </div>
        </div>
        <div class="clearfix">&nbsp;</div>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <h4>  Billing Info</h4>
        <br />

        <div class="Row">
            <div class="form-group">
                @Html.LabelFor(p => p.FirstName, htmlAttributes: new { @class = "control-label required" })
                @Html.EditorFor(p => p.FirstName, new { htmlAttributes = new { @class = "form-control required" } })
                @Html.ValidationMessageFor(p => p.FirstName, "", new { @class = "text-danger" })
                @Html.HiddenFor(p => Model.PropertyID)
            </div>
            <div class="form-group">
                @Html.LabelFor(p => p.LastName, htmlAttributes: new { @class = "control-label required" })
                @Html.EditorFor(p => p.LastName, new { htmlAttributes = new { @class = "form-control required" } })
                @Html.ValidationMessageFor(p => p.LastName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="Row">
            <div class="form-group">
                @Html.LabelFor(p => p.Email, htmlAttributes: new { @class = "control-label required" })
                @Html.EditorFor(p => p.Email, new { htmlAttributes = new { @class = "form-control required" } })
                @Html.ValidationMessageFor(p => p.Email, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(p => p.Phone, htmlAttributes: new { @class = "control-label required" })
                @Html.EditorFor(p => p.Phone, new { htmlAttributes = new { @class = "form-control phoneno-mask" } })
                @Html.ValidationMessageFor(p => p.Phone, "", new { @class = "text-danger" })

            </div>
        </div>
        <h4> Billing Address</h4>
        <div class="form-group">
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.CheckBoxFor(model => model.UsePropertyAddress, new { @onclick = "usePropertyAddress.call(this);" })
                    @Html.DisplayNameFor(model => model.UsePropertyAddress)
                    @Html.ValidationMessageFor(model => model.UsePropertyAddress, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <br />
        <div class="Row billing-address-fields">
            <div class="form-group">
                @Html.LabelFor(p => p.BillingAddress, htmlAttributes: new { @class = "control-label required" })
                @Html.EditorFor(p => p.BillingAddress, new { htmlAttributes = new { @class = "form-control billing-address-field" } })
                @Html.ValidationMessageFor(p => p.BillingAddress, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="Row billing-address-fields">
            <div class="form-group">
                @Html.LabelFor(p => p.BillingAddress_2, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(p => p.BillingAddress_2, new { htmlAttributes = new { @class = "form-control billing-address-field" } })
                @Html.ValidationMessageFor(p => p.BillingAddress_2, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="Row billing-address-fields">
            <div class="form-group">
                @Html.LabelFor(p => p.BillingCty, htmlAttributes: new { @class = "control-label required" })
                @Html.EditorFor(p => p.BillingCty, new { htmlAttributes = new { @class = "form-control billing-address-field" } })
                @Html.ValidationMessageFor(p => p.BillingCty, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="Row billing-address-fields">
            <div class="form-group col-md-3 no-padd">
                @Html.LabelFor(p => p.BillingState, htmlAttributes: new { @class = "control-label required" })
                @Html.DropDownListFor(p => p.BillingState, (IEnumerable<SelectListItem>)ViewBag.States, "--Select Billing State--", new { @class = "form-control" })
                @Html.ValidationMessageFor(p => p.BillingState, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row billing-address-fields">
            <div class="form-group">
                @Html.LabelFor(p => p.BillingZip, htmlAttributes: new { @class = "control-label required" })
                @Html.EditorFor(p => p.BillingZip, new { htmlAttributes = new { @class = "form-control billing-address-field" } })
                @Html.ValidationMessageFor(p => p.BillingZip, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class=" pull-left">
            <h4>Selected charges</h4>
            <br />
        </div>
        <table class="table" id="tblPayment">
            <tr>
                <th>
                    Due Date
                </th>
                <th>
                    Description
                </th>
                <th>
                    Amount
                </th>
            </tr>
            @for (int i = 0; i < Model.TenantRent.Count(); i++)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(p => Model.TenantRent[i].DueDateDisplay)
                        @Html.HiddenFor(p => Model.TenantRent[i].DueDate)
                        @Html.HiddenFor(p => Model.TenantRent[i].ID)
                        @Html.HiddenFor(p => Model.TenantRent[i].PropertyID)
                    </td>
                    <td>
                        <span>@Html.DisplayFor(p => Model.TenantRent[i].Charge)</span> 
                        @Html.HiddenFor(p => Model.TenantRent[i].Charge)
                    </td>
                    <td>
                        <span>@Html.DisplayFor(p => Model.TenantRent[i].AmountDue)</span> 
                        @Html.HiddenFor(p => Model.TenantRent[i].AmountDue)
                    </td>

                </tr>
            }
            <tfoot>
                <tr>
                    <td>
                        Total
                    </td>
                    <td></td>
                    <td>
                        <span>@Html.DisplayFor(p => Model.OrderTotal)</span>
                        @Html.HiddenFor(p => Model.OrderTotal)
                    </td>

                </tr>
            </tfoot>
        </table>

        <h4>Payment Method</h4>
        <br />
        <div class="row">
            <div class="col-md-12 no-padd">
                <div class="col-md-6">
        <div class="form-group">
            @Html.RadioButtonFor(model => model.PaymentMethod, "Credit Card", new { @id = "CreditCards", @onclick = "paymentMethodChange.call(this);" })Credit Card<br />
            @Html.RadioButtonFor(model => model.PaymentMethod, "eCheck", new { @id = "eChecks", @onclick = "paymentMethodChange.call(this);" })eCheck<br />
            @Html.ValidationMessageFor(model => model.PaymentMethod, "", new { @class = "text-danger" })
        </div>
                </div>
            </div>
        </div>
        <div class="row Creditcard">
            <div class="col-md-6">
                <div class="col-md-12 no-padd">
                <div class="form-group">
                    <span>Accepted methods: American Express, Discover, MasterCard, Visa</span>
                </div>
            </div>
                <div class="row Creditcard">
                    <div class="col-md-12 no-padd">
                        <div class="form-group">
            @Html.LabelFor(model => model.CardNo, htmlAttributes: new { @class = "control-label required" })
            @Html.EditorFor(model => model.CardNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CardNo, "", new { @class = "text-danger" })
        </div>
                    </div>
                </div>
                <div class="row Creditcard hidden ">
                    <div class="col-md-12 no-padd">
                        <div class="form-group">
                            @Html.Label("Card Expiry Date", htmlAttributes: new { @class = "control-label required" })
                            @*@Html.LabelFor(model => model.CardExpMon, htmlAttributes: new { @class = "control-label required" })*@
                        </div>
                    </div>
                </div>
        <div class="row Creditcard">
                    <div class="col-md-12 no-padd">
                <div class="form-group">
                    @Html.Label("Card Expiry Date", htmlAttributes: new { @class = "control-label required" })
                    <div class="col-md-4 col-xs-4 col-sm-3 no-padd">
                        @Html.DropDownListFor(model => model.CardExpMon, (IEnumerable<SelectListItem>)ViewBag.Months, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CardExpMon, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-6 col-xs-6 col-sm-4 col">
                                @Html.DropDownListFor(model => model.CardExpYear, (IEnumerable<SelectListItem>)ViewBag.Years, new { @class = "form-control " })
                        @Html.ValidationMessageFor(model => model.CardExpYear, "", new { @class = "text-danger" })
                    </div>
                    <div class="clearfix"></div>
                </div>
            </div>
            <div class="clearfix"></div>
        </div>
                <div class="row Creditcard">
                    <div class="col-md-12 no-padd">
                        <div class="form-group">
            @Html.LabelFor(model => model.CVV, htmlAttributes: new { @class = "control-label required" })
            @Html.EditorFor(model => model.CVV, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CVV, "", new { @class = "text-danger" })
        </div>
                    </div>
                </div>
            </div>

            <div class="table-responsive Creditcard col-md-6">
                <table class="table table-hover" style="border:1px solid #ddd">
                    <thead>
                        <tr>
                            <th>
                                Card Type
                            </th>
                            <th>
                                Processing Fee(%)
                            </th>
                        </tr>
                        <tr>
                            <th>
                                Visa
                            </th>
                            <td>8%</td>
                        </tr>
                        <tr>
                            <th>
                                MasterCard
                            </th>
                            <td>8%</td>
                        </tr>
                        <tr>
                            <th>
                                Discover
                            </th>
                            <td>8%</td>
                        </tr>
                        <tr>
                            <th>
                                Amex
                            </th>
                            <td>10%</td>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
        <div class="row eCheck">
            <div class="col-md-12">
            <div class="col-md-3 no-padd">
                <div class="form-group">
                    @Html.LabelFor(model => model.BankAccountType, htmlAttributes: new { @class = "control-label required" })
                        @Html.DropDownListFor(model => model.BankAccountType, new List<SelectListItem> { new SelectListItem { Text = "Checking", Value = "Checking" }, new SelectListItem { Text = "Saving", Value = "Saving" } }, "Please Select", new Dictionary<String, object> { { "class", "control-label form-control" } })
                    @Html.ValidationMessageFor(model => model.BankAccountType, "", new { @class = "text-danger" })
                </div>
            </div>
                <div class="table-responsive eCheck col-md-offset-6">
                    <table class="table table-hover" style="border:1px solid #ddd">
                        <thead>
                            <tr>
                                <th>
                                    Card Type
                                </th>
                                <th>
                                    Processing Fee(%)
                                </th>
                            </tr>
                            <tr>
                                <th>
                                    eCheck
                                </th>
                                <td>10.75%</td>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
        <div class="row eCheck">
            <div class="col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.BankRoutingNumber, htmlAttributes: new { @class = "control-label required" })
                    @Html.EditorFor(model => model.BankRoutingNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BankRoutingNumber, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row eCheck">
            <div class="col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.BankAccountNumber, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.BankAccountNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BankAccountNumber, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    <div class="row savecard no-padd">
        <div class="col-md-1  col-xs-2 col-sm-2" style="width:10px;">
            <div class="form-group no-padd">
                    @Html.CheckBoxFor(model => model.SaveCard, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SaveCard, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-5">
                <div class="form-group">
                    @Html.LabelFor(model => model.SaveCard, htmlAttributes: new { @class = "control-label", @id = "save_card" })
                </div>
            </div>
        </div>
        <div class="clearfix"></div>
        <div class="form-group">
            @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label" })
            @Html.TextAreaFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control" }, @cols = 5, @rows = 10 })
            @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
        </div>
        <input type="submit" value="Pay Now" class="btn btn-primary  " />
        @Html.ActionLink("Cancel", "Myaccount", "Tenant", null, new { })
    }
</div>
@section scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(document).ready(function () {
            usePropertyAddress();
            paymentMethodChange();
        });

        function usePropertyAddress() {
            if ($('#UsePropertyAddress').prop('checked')) {
                $('.billing-address-fields').hide();
            }
            else {
                $('.billing-address-fields').show();
            }

        };

        function paymentMethodChange() {
            debugger;
            if ($('#CreditCards').prop('checked')) {
                debugger;
                $('.Creditcard').show();
                $('.savecard').show();
                $('.eCheck').hide();
                $('#save_card').text("Save Card");
                var result = $('#CardNo').validateCreditCard();
                feechargecalc(result.card_type != null ? result.card_type.name : '')
            } else {
                $('.Creditcard').hide();
                $('.savecard').show();
                $('.eCheck').show();
                $('#save_card').text("Save Account");
                feechargecalc('echeck');
            }
        }
        $('#CardNo').validateCreditCard(function (result) {
            if (result.card_type != null) {
                console.log(result);
                feechargecalc(result.card_type.name);
            }
        }).keydown(function (e) {
            // Allow: backspace, delete, tab, escape, enter and .
            if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                // Allow: Ctrl+A, Command+A
                (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                // Allow: home, end, left, right, down, up
                (e.keyCode >= 35 && e.keyCode <= 40)) {
                // let it happen, don't do anything
                return;
            }
            // Ensure that it is a number and stop the keypress
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
        });
        function feechargecalc(cardtype) {
            var totalProductsPrices = 0;
            //for total product costs without tax and process fee
            $('#tblPayment>tbody>tr>td:last-child:not(td:last)').each(function () {
                totalProductsPrices += parseFloat(parseCurrency($(this).text()), 10);
            });

            //percentage caliculator on basis of card type
            var objectResults = paymentCaliculation(cardtype, totalProductsPrices);
           
            var currsym = ($('#tblPayment>tbody>tr>td:last>span').text()!= null && $('#tblPayment>tbody>tr>td:last>span').text().trim().length > 0 ?$('#tblPayment>tbody>tr>td:last>span').text().trim().substring(0, 1) : '');
            //for amount column change
            $('#tblPayment>tbody>tr>td:last>span').text(currsym + objectResults.processFeeValue);
            $('#tblPayment>tbody>tr>td:last :input[type=hidden]').val(objectResults.processFeeValue);
            //for item column change
            $('#tblPayment>tbody>tr>td:nth-child(2):last>span').text('Payment Processing and Convenience Fee (' + objectResults.conventionFee + '%)');
            $('#tblPayment>tbody>tr>td:nth-child(2):last :input[type=hidden]').val('Payment Processing and Convenience Fee (' + objectResults.conventionFee + '%)');
           
            //for order total count
            var totalResult = 0;
            $('#tblPayment>tbody>tr>td:last-child').each(function () {
                totalResult += parseFloat(parseCurrency($(this).find('span').text()), 10);
            });
            $('#tblPayment>tfoot>tr>td:last-child span').text(currsym + totalResult);
            debugger;
            $('#OrderTotal').val(totalResult);
        }

    </script>
}





