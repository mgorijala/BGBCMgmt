@model BGBC.Web.Models.UserProfile

@{
    ViewBag.Title = "Profile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="back">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(p => p.ProfileInfo.ProfileID)
        @Html.HiddenFor(m => m.Createdon)
        @Html.HiddenFor(m => m.Updatedon)

       
        <div class="col-md-12 no-padd">
            <div class="col-md-6 no-padd">
                <h1>Edit Profile</h1>
            </div>
            <div class="col-md-6 no-padd header-btn">
                @Html.ActionLink("Back to My Dashboard", "Index", "Owner", null, new { @class = "btn-button btn-primary" })
            </div>
    </div>
    <div class="col-md-12 no-padd">
        @if (TempData["SucessMessage"] != null)
        {
        <div class="alert alert-success">@TempData["SucessMessage"]</div>
        }
    </div>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div>    
            <fieldset>
                <legend>Basic Information</legend>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(tuple => tuple.FirstName, htmlAttributes: new { @class = "control-label required" })
                            @Html.EditorFor(tuple => tuple.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(tuple => tuple.FirstName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(tuple => tuple.LastName, htmlAttributes: new { @class = "control-label required" })
                            @Html.EditorFor(tuple => tuple.LastName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(tuple => tuple.LastName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(tuple => tuple.Email, htmlAttributes: new { @class = "control-label required" })
                            @Html.EditorFor(tuple => tuple.Email, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(tuple => tuple.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(tuple => tuple.ConfirmEmail, htmlAttributes: new { @class = "control-label required" })
                            @Html.EditorFor(tuple => tuple.ConfirmEmail, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(tuple => tuple.ConfirmEmail, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(tuple => tuple.NewPassword, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(tuple => tuple.NewPassword, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(tuple => tuple.NewPassword, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(tuple => tuple.ConfirmPassword, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(tuple => tuple.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(tuple => tuple.ConfirmPassword, "", new { @class = "text-danger" })
                        </div> 
                     </div>
                </div>
                <div class="row">
                    <div class="col-md-6">                                 
                        <div class="form-group">
                            @Html.LabelFor(tuple => tuple.CurrentPassword, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(tuple => tuple.CurrentPassword, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(tuple => tuple.CurrentPassword, "", new { @class = "text-danger" })
                        </div>
                    </div> 
                </div>    
                <div class="row">
                   <div class="col-md-12">
                       <span>Note: You Must Enter Your Current Password when changing your Email or Password</span>
                    </div>
                </div>
            </fieldset>
        </div>        
        <div>    
            <fieldset>
                <legend>Contact Information</legend>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(tuple => tuple.AltEmail, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(tuple => tuple.AltEmail, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(tuple => tuple.AltEmail, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(tuple => tuple.ConfirmAltEmail, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(tuple => tuple.ConfirmAltEmail, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(tuple => tuple.ConfirmAltEmail, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(tuple => tuple.ProfileInfo.BillingAddress, htmlAttributes: new { @class = "control-label"})
                            @Html.EditorFor(tuple => tuple.ProfileInfo.BillingAddress, new { htmlAttributes = new { @class = "form-control"} })
                            @Html.ValidationMessageFor(tuple => tuple.ProfileInfo.BillingAddress, "", new { @class = "text-danger"})
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(tuple => tuple.ProfileInfo.BillingAddress_2, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(tuple => tuple.ProfileInfo.BillingAddress_2, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(tuple => tuple.ProfileInfo.BillingAddress_2, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div> 
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(tuple => tuple.ProfileInfo.BillingCty, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(tuple => tuple.ProfileInfo.BillingCty, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(tuple => tuple.ProfileInfo.BillingCty, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.LabelFor(tuple => tuple.ProfileInfo.BillingState, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(tuple => tuple.ProfileInfo.BillingState, (IEnumerable<SelectListItem>)ViewBag.States, "Select a State", new { @class = "form-control" })
                            @Html.ValidationMessageFor(tuple => tuple.ProfileInfo.BillingState, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(tuple => tuple.ProfileInfo.BillingZip, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(tuple => tuple.ProfileInfo.BillingZip, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(tuple => tuple.ProfileInfo.BillingZip, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(tuple => tuple.ProfileInfo.MobilePhone, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(tuple => tuple.ProfileInfo.MobilePhone, new { htmlAttributes = new { @class = "form-control phoneno-mask" }, })
                            @Html.ValidationMessageFor(tuple => tuple.ProfileInfo.MobilePhone, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(tuple => tuple.ProfileInfo.FaxNumber, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(tuple => tuple.ProfileInfo.FaxNumber, new { htmlAttributes = new { @class = "form-control phoneno-mask"} })
                            @Html.ValidationMessageFor(tuple => tuple.ProfileInfo.FaxNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(tuple => tuple.ProfileInfo.PaymentMethod, htmlAttributes: new { @class = "control-label required" })

                            @Html.RadioButtonFor(model => model.ProfileInfo.PaymentMethod, "PayPal Email", new { @id = "paymail", @checked = "true" })PayPal Email<br />
                            @Html.RadioButtonFor(model => model.ProfileInfo.PaymentMethod, "ACH Direct Deposit", new { @id = "Deposit" })ACH Direct Deposit<br />
                            @Html.RadioButtonFor(model => model.ProfileInfo.PaymentMethod, "Mail Check", new { @id = "mail" })Mail Check
                        </div>                             
                        <div class="form-group PaypalEmailFields">
                            @Html.LabelFor(tuple => tuple.ProfileInfo.PaypalEmail, htmlAttributes: new { @class = "control-label required" })
                            @Html.EditorFor(tuple => tuple.ProfileInfo.PaypalEmail, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(tuple => tuple.ProfileInfo.PaypalEmail, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group DirectDepositFields">
                            <span>ACH is a great way to get your money fast and directly into the account of your choice. Select this option if you prefer this option and one of our expert customer service representatives will call you directly to complete the ACH set up.</span>
                        </div>
                        <div class="form-group MailCheckFields">
                            @Html.LabelFor(tuple => tuple.ProfileInfo.PayoutMailAddress, htmlAttributes: new { @class = "control-label required" })
                            @Html.EditorFor(tuple => tuple.ProfileInfo.PayoutMailAddress, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(tuple => tuple.ProfileInfo.PayoutMailAddress, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group MailCheckFields">
                            @Html.LabelFor(tuple => tuple.ProfileInfo.PayoutMailAddress2, htmlAttributes: new { @class = "control-label required" })
                            @Html.EditorFor(tuple => tuple.ProfileInfo.PayoutMailAddress2, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(tuple => tuple.ProfileInfo.PayoutMailAddress2, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group MailCheckFields">
                            @Html.LabelFor(tuple => tuple.ProfileInfo.PayoutMailCity, htmlAttributes: new { @class = "control-label required" })
                            @Html.EditorFor(tuple => tuple.ProfileInfo.PayoutMailCity, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(tuple => tuple.ProfileInfo.PayoutMailCity, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group MailCheckFields col-md-10 no-padd">
                            @Html.LabelFor(tuple => tuple.ProfileInfo.PayoutMailState, htmlAttributes: new { @class = "control-label required" })
                            @Html.DropDownListFor(tuple => tuple.ProfileInfo.PayoutMailState, (IEnumerable<SelectListItem>)ViewBag.States, "Select a State", new { @class = "form-control" })
                            @Html.ValidationMessageFor(tuple => tuple.ProfileInfo.PayoutMailState, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group MailCheckFields">
                            @Html.LabelFor(tuple => tuple.ProfileInfo.PayoutMailZip, htmlAttributes: new { @class = "control-label required" })
                            @Html.EditorFor(tuple => tuple.ProfileInfo.PayoutMailZip, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(tuple => tuple.ProfileInfo.PayoutMailZip, "", new { @class = "text-danger" })
                        </div>
                     </div>
                </div>
            </fieldset>
        </div>
        <div>
            @Html.LabelFor(m => m.Createdon, new { style = "display:inline;" }):
            @Html.DisplayFor(m => m.Createdon)
        </div>
        <div>
            @Html.LabelFor(m => m.Updatedon, new { style = "display:inline;" }):
            @Html.DisplayFor(m => m.Updatedon)
        </div>
        <br />
        <div>
            <input type="submit" value="Save" class="btn btn-primary btn-button">
            @Html.ActionLink("Cancel", "Index", "Owner", null, new { @class = "btn-button btn-primary" })
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

<script type="text/javascript">
    $(function () {
        if ($("#paymail").is(':checked')) {
            $('.PaypalEmailFields').show();
            $('.DirectDepositFields').hide();
            $('.MailCheckFields').hide();
        }
        else if ($("#Deposit").is(':checked')) {
            $('.PaypalEmailFields').hide();
            $('.DirectDepositFields').show();
            $('.MailCheckFields').hide();
        }
        else if ($("#mail").is(':checked'))
        {
            $('.PaypalEmailFields').hide();
            $('.DirectDepositFields').hide();
            $('.MailCheckFields').show();
        }


        $('#paymail').change(function () {
            if ($(this).is(':checked')) {
                $('.PaypalEmailFields').show();
                $('.DirectDepositFields').hide();
                $('.MailCheckFields').hide();
            }
        });
        $('#Deposit').change(function () {
            if ($(this).is(':checked')) {
                $('.PaypalEmailFields').hide();
                $('.DirectDepositFields').show();
                $('.MailCheckFields').hide();
            }
        });
        $('#mail').change(function () {
            if ($(this).is(':checked')) {
                $('.PaypalEmailFields').hide();
                $('.DirectDepositFields').hide();
                $('.MailCheckFields').show();
            }
        });
       
    });
</script>
}
